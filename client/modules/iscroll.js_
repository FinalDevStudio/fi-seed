(function () {
    'use strict';

    var iscroll = angular.module('IScroll', []),
        scrolls = {},
        defaults = {
            mouseWheel: true,
            scrollbars: 'custom',
            shrinkScrollbars: 'clip'
        };

    iscroll.factory('$iscroll', function () {

        return {
            /**
             * Creates a new iScroll instance with the given name as reference.
             * 
             * @param name The iScroll reference name.
             * @param element The target HTML element.
             * @param options The iScroll options object.
             * 
             * @return void
             */
            create: function (name, element, options) {
                var opts = defaults, iscroll, self = this;

                if (angular.isObject(options)) {
                    angular.extend(opts, options);
                }

                scrolls[name] = new IScroll(element, opts);
            },

            /**
             * Returns the iScroll instance associated to that name.
             * 
             * @return IScroll
             */
            get: function (name) {
                return scrolls[name];
            },

            /**
             * Refreshes the iScroll instance associated to that name.
             * 
             * @param name The iScroll reference name.
             * @param bottom If the scroller shold go to the bottom.
             * @param delay How much delay after refreshing.
             * 
             * @return void
             */
            refresh: function (name, bottom, delay) {
                setTimeout(function () {
                    scrolls[name].refresh();

                    if (bottom) {
                        scrolls[name].scrollTo(0, scrolls[name].maxScrollY, 432);
                    }
                }, delay || 100);
            },

            /**
             * Refreshes all the iScroll instances.
             * 
             * @param bottom If the scrollers should go to the bottom.
             * @param delay How much delay after refreshing each instance.
             * 
             * @return void
             */
            refreshAll: function (bottom, delay) {
                var scroll;

                for (scroll in scrolls) {
                    if (scrolls.hasOwnProperty(scroll)) {
                        this.refresh(scroll, bottom, delay);
                    }
                }
            },

            /**
             * Destroy the iScroll instance associated to that name.
             * 
             * @param name The iScroll instance name to destroy.
             * 
             * @return void
             */
            destroy: function (name) {
                scrolls[name].destroy();
                delete scrolls[name];
            }
        };
    });

    iscroll.directive('ngIscroll', function ($iscroll) {

        function link(scope, element, attrs) {
            if (!attrs.ngIscroll || attrs.ngIscroll === 'ng-iscroll') {
                throw new Error("You must specify a unique and custom name for your scroller!");
            } else if (scrolls[attrs.ngIscroll]) {
                throw new Error("The scroller name '" + attrs.ngIscroll + "' is already in use!");
            } else {
                $iscroll.create(attrs.ngIscroll, element[0], defaults);

                element.on('$destroy', function () {
                    $iscroll.destroy(attrs.ngIscroll);
                });

                element.on('mouseup', function () {
                    $iscroll.refresh(attrs.ngIscroll);
                });
            }
        }

        return {
            restrict: 'A',
            link: link
        };

    });

}());
